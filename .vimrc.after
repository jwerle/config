" globals
let g:NERDTreeWinPos = 'right'
let g:JSHintHighlightErrorLine = 0

" Status line configuration
set statusline+=%#warningmsg#  " Add Error ruler.
set statusline+=%{SyntasticStatuslineFlag()}
set statusline+=%*
nnoremap <silent> ` :Errors<CR>

" highlight all occurrences of word on double click
nnoremap <silent> <2-leftMouse> :exe 'highlight DoubleClick ctermbg=green guibg=green<bar>match DoubleClick /\V\<'.escape(expand('<cword>'), '\').'\>/'<cr>

let g:ale_c_clang_options = ' -I' . getcwd()
let g:ale_c_clang_options .= ' -I' . getcwd() . '/build/include'
let g:ale_c_clang_options .= ' -I' . getcwd() . '/include'
let g:ale_c_clang_options .= ' -I' . getcwd() . '/deps'
let g:ale_cpp_clang_options = g:ale_c_clang_options

let g:ale_c_gcc_options = g:ale_c_clang_options
let g:ale_cpp_gcc_options = g:ale_cpp_clang_options

let g:ale_c_clangtidy_options = g:ale_c_clang_options
let g:ale_cpp_clangtidy_options = g:ale_cpp_clang_options

let g:ale_c_clangcheck_options = g:ale_c_clang_options
let g:ale_cpp_clangcheck_options = g:ale_cpp_clang_options

let g:ale_cpp_cpplint_options = g:ale_cpp_clang_options
let g:ale_cpp_cppcheck_options = g:ale_cpp_clang_options

" C Syntastic options
let g:syntastic_c_auto_refresh_includes = 1
let g:syntastic_c_include_dirs = [ 'include', 'deps', 'build/include', 'Headers', 'headers', 'build/Headers' ]
let g:syntastic_c_check_header = 1

let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list = 1
let g:syntastic_check_on_open = 1
let g:syntastic_check_on_wq = 0
let g:syntastic_enable_signs = 1

" Read the clang complete file
let g:syntastic_objc_include_dirs = g:syntastic_c_include_dirs
let g:syntastic_objc_config_file = '.clang_complete'

" Disable auto completion, always <c-x> <c-o> to complete
let g:clang_complete_auto = 0
let g:clang_use_library = 1
let g:clang_periodic_quickfix = 0
let g:clang_close_preview = 1

" For Objective-C, this needs to be active, otherwise multi-parameter methods won't be completed correctly
let g:clang_snippets = 1

" Snipmate does not work anymore, ultisnips is the recommended plugin
let g:clang_snippets_engine = 'ultisnips'

" This might change depending on your installation
let g:clang_exec = '/usr/local/opt/llvm/bin/clang'
let g:clang_library_path = '/usr/local/opt/llvm/lib/libclang.dylib'

" jsdoc
let g:jsdoc_additional_descriptions = 1
let g:jsdoc_access_descriptions = 1
let g:jsdoc_enable_es6 = 1

" vim-javascript
let g:javascript_plugin_jsdoc = 1

" vim-markdown
let g:vim_markdown_folding_disabled = 1

let g:syntastic_typescript_tsc_fname = ''

" nerdtree setup
let NERDTreeShowBookmarks = 0
let NERDChristmasTree = 1
let NERDTreeHijackNetrw = 1
let NERDTreeQuitOnOpen = 1
let NERDTreeChDirMode = 2
let NERDTreeDirArrows = 0

" ALE
let g:ale_linters = { 'javascript': ['eslint'] }

let g:auto_ctags = 1

" map ESC
imap jj <ESC>

" switch between buffers
noremap <tab> :bn<CR>
noremap <S-tab> :bp<CR>

" Saving and exit
nmap <leader>q :q<CR>
nmap <leader>w :w<CR>
nmap <leader>d :bd<CR>

noremap <leader>ww <NOP>

" ctrl-p setup
map <leader>p :CtrlP<cr>

set guifont=Roboto:h12
" Removes top toolbar
set guioptions-=T
" Removes right hand scroll bar
set guioptions-=r
" Removes left hand scroll bar
set go-=L
" puts a $ marker for the end of words/lines in cw/c$ commands
set cpoptions+=$
" Adds `./deps/**' to the local include path for C files
set path+=./deps/**

set mouse=a

" plum theme
set term=screen-256color
set bg=dark
"set bg=light
"colorscheme plum
"colorscheme zazen
colorscheme hybrid_material
"colorscheme perun
"colorscheme seagrey-dark

" make transparent background
highlight Normal ctermbg=none
highlight NonText ctermbg=none

" setup undo magic
" make sure `~/tmp/vim/{backup,undo}' exists
set undofile
set undodir=~/tmp/vim/undo
set undolevels=1000
set undoreload=1000
set backupdir=~/tmp/vim/backup

" displays <% %> correctly
autocmd User Rails let b:surround_{char2nr('-')} = "<% \r %>"
autocmd FileType js,javascript,glsl,c,cc,cpp,sly highlight OverLength ctermbg=red ctermfg=white guibg=#592929
autocmd FileType js,javascript,glsl,c,cc,cpp,sly  match OverLength /\%81v.\+/

au BufNewFile,BufRead *.js set filetype=javascript

au BufNewFile,BufRead *.ejs,*.tmpl,*.mu,*.tpl,*.xhtml set filetype=html

au BufNewFile,BufRead .netrc set filetype=netrc
au BufNewFile,BufRead .eslintrc set filetype=json
au BufNewFile,BufRead .eslintrc set syntax=json

au BufNewFile,BufRead Servicefile set filetype=sh
au BufNewFile,BufRead Servicefile set syntax=sh

au BufNewFile,BufRead .npmignore set filetype=sh
au BufNewFile,BufRead .npmignore set syntax=sh

au BufNewFile,BufRead .*vimrc* set filetype=vim
au BufNewFile,BufRead .*vimrc* set syntax=vim

au BufNewFile,BufRead .*conf* set filetype=conf
au BufNewFile,BufRead .*conf* set syntax=conf

au BufNewFile,BufRead .babelrc set filetype=json
au BufNewFile,BufRead .babelrc set syntax=json

au BufNewFile,BufRead .cfsrc set filetype=conf
au BufNewFile,BufRead .cfsrc set syntax=conf

au BufNewFile,BufRead .ararc set filetype=conf
au BufNewFile,BufRead .ararc set syntax=conf

au BufNewFile,BufRead .bash* set filetype=sh
au BufNewFile,BufRead .bash* set syntax=sh

au BufNewFile,BufRead *termite/config set filetype=dosini
au BufNewFile,BufRead *termite/config set syntax=dosini

" au BufNewFile,BufRead *.kt set filetype=kotlin
" au BufNewFile,BufRead *.kt set syntax=kotlin

au BufNewFile,BufRead *.glsl,*.vert,*.vertex,*.frag,*.fragment set filetype=glsl
au BufNewFile,BufRead *.glsl,*.vert,*.vertex,*.frag,*.fragment set syntax=glsl

highlight LineNr ctermfg=grey

set mouse=a
set modelines=1
ALEEnable

let g:tagbar_type_solidity = {
    \ 'ctagstype': 'solidity',
    \ 'kinds' : [
        \ 'c:contracts',
        \ 'e:events',
        \ 'f:functions',
        \ 'm:mappings',
        \ 'v:varialbes'
    \ ]
\ }

" source local `./.vimrc' file
if filereadable(glob("./.vimrc")) && $HOME != getcwd()
  source ./.vimrc
endif
